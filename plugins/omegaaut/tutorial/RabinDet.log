======== Pseudo-Determinization Example ========

=== Input Nondeterministic Rabin Automaton ===
<Generator>
Generator_Expanded 

% 
%  Statistics for Generator_Expanded
% 
%  States:        8
%  Init/Marked:   1/1
%  Events:        5
%  Transitions:   22
%  StateSymbols:  8
%  Attrib. E/S/T: 3/0/0
% 

<Alphabet>
a_1_G2#1      +C+           b_2_G1#2      b_2_G2#3      eps_G1#4      +o+          
eps_G2#5      +o+          
</Alphabet>

<States>
E1|E1|F1#1    E1|E1|F2#2    E2|E1|F1#3    E2|E1|F2#4    E1|E2|F1#5    E1|E2|F2#6   
E2|E2|F1#7    E2|E2|F2#8   
</States>

<TransRel>
E1|E1|F1[1]   a_1_G2[1]     E2|E1|F2[4]  
E1|E1|F1[1]   eps_G1[4]     E1|E2|F1[5]  
E1|E1|F1[1]   eps_G2[5]     E1|E2|F1[5]  
E1|E1|F2[2]   eps_G1[4]     E1|E2|F2[6]  
E1|E1|F2[2]   eps_G2[5]     E1|E2|F2[6]  
E2|E1|F1[3]   eps_G1[4]     E1|E1|F1[1]  
E2|E1|F1[3]   eps_G1[4]     E2|E2|F1[7]  
E2|E1|F1[3]   eps_G2[5]     E1|E1|F1[1]  
E2|E1|F1[3]   eps_G2[5]     E2|E2|F1[7]  
E2|E1|F2[4]   eps_G1[4]     E1|E1|F2[2]  
E2|E1|F2[4]   eps_G1[4]     E2|E2|F2[8]  
E2|E1|F2[4]   eps_G2[5]     E1|E1|F2[2]  
E2|E1|F2[4]   eps_G2[5]     E2|E2|F2[8]  
E1|E2|F1[5]   a_1_G2[1]     E2|E2|F2[8]  
E1|E2|F2[6]   b_2_G1[2]     E1|E1|F1[1]  
E1|E2|F2[6]   b_2_G2[3]     E1|E1|F1[1]  
E2|E2|F1[7]   eps_G1[4]     E1|E2|F1[5]  
E2|E2|F1[7]   eps_G2[5]     E1|E2|F1[5]  
E2|E2|F2[8]   b_2_G1[2]     E2|E1|F1[3]  
E2|E2|F2[8]   b_2_G2[3]     E2|E1|F1[3]  
E2|E2|F2[8]   eps_G1[4]     E1|E2|F2[6]  
E2|E2|F2[8]   eps_G2[5]     E1|E2|F2[6]  
</TransRel>

<InitStates>
E1|E1|F1#1   
</InitStates>

<MarkedStates>
E1|E1|F1#1   
</MarkedStates>

<RabinAcceptance>
<RabinPair name="RabinPair">
<R>
E1|E1|F2      E2|E1|F2      E1|E2|F2      E2|E2|F2     
</R>
<I>
E1|E1|F1      E2|E1|F1      E1|E2|F1      E2|E2|F1     
</I>
</RabinPair>
</RabinAcceptance>

</Generator>


=== Applying Pseudo-Determinization Algorithm ===
Debug: Input generator has 1 RabinPairs
Debug: Processing state 1 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 1              </IndexSet>], color=WHITE, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Created new state 2 for tree
Debug: Processing event b_2_G1
Debug: Created new state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Created new state 4 for tree
Debug: Marking state 4
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 4 for tree
Debug: Processing state 2 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 4              </IndexSet>], color=RED, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Created new state 5 for tree
Debug: Processing event eps_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 5 for tree
Debug: Processing state 3 with tree: Tree{root=1, nodes=[]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Found existing state 3 for tree
Debug: Processing event eps_G2
Debug: Found existing state 3 for tree
Debug: Processing state 4 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 1              5              </IndexSet>], color=GREEN, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Created new state 6 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Found existing state 4 for tree
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 4 for tree
Debug: Processing state 5 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 2              4              8              </IndexSet>], color=RED, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Green coloring for node 1
Debug: Created new state 7 for tree
Debug: Marking state 7
Debug: Processing event b_2_G2
Debug: Green coloring for node 1
Debug: Found existing state 7 for tree
Debug: Processing event eps_G1
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Created new state 8 for tree
Debug: Processing event eps_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 8 for tree
Debug: Processing state 6 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 4              8              </IndexSet>], color=RED, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Green coloring for node 1
Debug: Found existing state 7 for tree
Debug: Processing event b_2_G2
Debug: Green coloring for node 1
Debug: Found existing state 7 for tree
Debug: Processing event eps_G1
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 8 for tree
Debug: Processing event eps_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 8 for tree
Debug: Processing state 7 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 3              </IndexSet>], color=GREEN, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Created new state 9 for tree
Debug: Marking state 9
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 9 for tree
Debug: Processing state 8 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 2              4              6              8              </IndexSet>], color=RED, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G1
Debug: Green coloring for node 1
Debug: Created new state 10 for tree
Debug: Marking state 10
Debug: Processing event b_2_G2
Debug: Green coloring for node 1
Debug: Found existing state 10 for tree
Debug: Processing event eps_G1
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 8 for tree
Debug: Processing event eps_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 8 for tree
Debug: Processing state 9 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 1              3              7              </IndexSet>], color=GREEN, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 2 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Created new state 11 for tree
Debug: Marking state 11
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 11 for tree
Debug: Processing state 10 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 1              3              </IndexSet>], color=GREEN, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 2 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Found existing state 11 for tree
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 11 for tree
Debug: Processing state 11 with tree: Tree{root=1, nodes=[1:Node{states=[<IndexSet> 1              3              5              7              </IndexSet>], color=GREEN, children=0, aSet=0, rSet=0}, ]}
Debug: Processing event a_1_G2
Warning: Reached maximum total children limit.
Debug: Red breakpoint at node 1
Debug: Found existing state 6 for tree
Debug: Processing event b_2_G1
Debug: Found existing state 3 for tree
Debug: Processing event b_2_G2
Debug: Found existing state 3 for tree
Debug: Processing event eps_G1
Debug: Green coloring for node 1
Debug: Found existing state 11 for tree
Debug: Processing event eps_G2
Debug: Green coloring for node 1
Debug: Found existing state 11 for tree
Debug: PseudoDet completed with 11 states and 1 RabinPairs

=== Output Deterministic Rabin Automaton ===
<Generator>
PseudoDet(Generator_Expanded) 

% 
%  Statistics for PseudoDet(Generator_Expanded)
% 
%  States:        11
%  Init/Marked:   1/5
%  Events:        5
%  Transitions:   55
%  StateSymbols:  0
%  Attrib. E/S/T: 3/0/0
% 

<Alphabet>
a_1_G2#1      +C+           b_2_G1#2      b_2_G2#3      eps_G1#4      +o+          
eps_G2#5      +o+          
</Alphabet>

<States>
"1#1"         "2#2"         "3#3"         "4#4"         "5#5"         "6#6"        
"7#7"         "8#8"         "9#9"         "10#10"       "11#11"      
</States>

<TransRel>
"1"           a_1_G2[1]     "2"          
"1"           b_2_G1[2]     "3"          
"1"           b_2_G2[3]     "3"          
"1"           eps_G1[4]     "4"          
"1"           eps_G2[5]     "4"          
"2"           a_1_G2[1]     "3"          
"2"           b_2_G1[2]     "3"          
"2"           b_2_G2[3]     "3"          
"2"           eps_G1[4]     "5"          
"2"           eps_G2[5]     "5"          
"3"           a_1_G2[1]     "3"          
"3"           b_2_G1[2]     "3"          
"3"           b_2_G2[3]     "3"          
"3"           eps_G1[4]     "3"          
"3"           eps_G2[5]     "3"          
"4"           a_1_G2[1]     "6"          
"4"           b_2_G1[2]     "3"          
"4"           b_2_G2[3]     "3"          
"4"           eps_G1[4]     "4"          
"4"           eps_G2[5]     "4"          
"5"           a_1_G2[1]     "3"          
"5"           b_2_G1[2]     "7"          
"5"           b_2_G2[3]     "7"          
"5"           eps_G1[4]     "8"          
"5"           eps_G2[5]     "8"          
"6"           a_1_G2[1]     "3"          
"6"           b_2_G1[2]     "7"          
"6"           b_2_G2[3]     "7"          
"6"           eps_G1[4]     "8"          
"6"           eps_G2[5]     "8"          
"7"           a_1_G2[1]     "3"          
"7"           b_2_G1[2]     "3"          
"7"           b_2_G2[3]     "3"          
"7"           eps_G1[4]     "9"          
"7"           eps_G2[5]     "9"          
"8"           a_1_G2[1]     "3"          
"8"           b_2_G1[2]     "10"         
"8"           b_2_G2[3]     "10"         
"8"           eps_G1[4]     "8"          
"8"           eps_G2[5]     "8"          
"9"           a_1_G2[1]     "2"          
"9"           b_2_G1[2]     "3"          
"9"           b_2_G2[3]     "3"          
"9"           eps_G1[4]     "11"         
"9"           eps_G2[5]     "11"         
"10"          a_1_G2[1]     "2"          
"10"          b_2_G1[2]     "3"          
"10"          b_2_G2[3]     "3"          
"10"          eps_G1[4]     "11"         
"10"          eps_G2[5]     "11"         
"11"          a_1_G2[1]     "6"          
"11"          b_2_G1[2]     "3"          
"11"          b_2_G2[3]     "3"          
"11"          eps_G1[4]     "11"         
"11"          eps_G2[5]     "11"         
</TransRel>

<InitStates>
"1#1"        
</InitStates>

<MarkedStates>
"4#4"         "7#7"         "9#9"         "10#10"       "11#11"      
</MarkedStates>

<RabinAcceptance>
<RabinPair name="RabinPair">
<R>
2              5              6              8             
</R>
<I>
4              7              9              10             11            
</I>
</RabinPair>
</RabinAcceptance>

</Generator>

